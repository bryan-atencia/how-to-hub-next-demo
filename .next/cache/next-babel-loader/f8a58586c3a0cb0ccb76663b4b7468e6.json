{"ast":null,"code":"import fs from \"fs\";\nimport { path, join } from \"path\";\nexport function getAllCategories() {\n  var filePath = \"./public/admin/collections/Categories\";\n  var folder = fs.readdirSync(filePath).map(function (name) {\n    return join(filePath, name);\n  });\n  var data = folder.map(function (x) {\n    return JSON.parse(fs.readFileSync(x, 'utf-8'));\n  });\n  return data;\n}\nexport function getCategoryIds() {\n  var filePath = \"./public/admin/collections/Categories\";\n  var fileNames = fs.readdirSync(filePath);\n  return fileNames.map(function (x) {\n    return {\n      params: {\n        id: fileName.replace(/\\.json$/, '')\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/Users/bryanatencia/demo/how-to-hub-next-demo/public/admin/functions/categories/index.js"],"names":["fs","path","join","getAllCategories","filePath","folder","readdirSync","map","name","data","x","JSON","parse","readFileSync","getCategoryIds","fileNames","params","id","fileName","replace"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,MAA3B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AACjC,MAAIC,QAAQ,GAAG,uCAAf;AACA,MAAIC,MAAM,GAAGL,EAAE,CAACM,WAAH,CAAeF,QAAf,EAAyBG,GAAzB,CAA6B,UAAAC,IAAI;AAAA,WAAIN,IAAI,CAACE,QAAD,EAAWI,IAAX,CAAR;AAAA,GAAjC,CAAb;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACE,GAAP,CAAW,UAAAG,CAAC;AAAA,WAAIC,IAAI,CAACC,KAAL,CAAWZ,EAAE,CAACa,YAAH,CAAgBH,CAAhB,EAAmB,OAAnB,CAAX,CAAJ;AAAA,GAAZ,CAAX;AACA,SAAOD,IAAP;AACD;AAED,OAAO,SAASK,cAAT,GAA0B;AAC/B,MAAIV,QAAQ,GAAG,uCAAf;AACA,MAAIW,SAAS,GAAGf,EAAE,CAACM,WAAH,CAAeF,QAAf,CAAhB;AACA,SAAOW,SAAS,CAACR,GAAV,CAAc,UAAAG,CAAC,EAAI;AACxB,WAAO;AACLM,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEC,QAAQ,CAACC,OAAT,CAAiB,SAAjB,EAA4B,EAA5B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD","sourcesContent":["import fs from \"fs\"\nimport { path, join } from \"path\"\n\nexport function getAllCategories() {\n  let filePath = \"./public/admin/collections/Categories\"\n  let folder = fs.readdirSync(filePath).map(name => join(filePath, name))\n  let data = folder.map(x => JSON.parse(fs.readFileSync(x, 'utf-8')))\n  return data\n}\n\nexport function getCategoryIds() {\n  let filePath = \"./public/admin/collections/Categories\"\n  let fileNames = fs.readdirSync(filePath)\n  return fileNames.map(x => {\n    return {\n      params: {\n        id: fileName.replace(/\\.json$/, '')\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}