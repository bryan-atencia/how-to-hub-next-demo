{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport getCategories from \"../../public/admin/functions/getCategories.js\";\nimport Layout from '../../components/layout.js';\nimport { Grid, Typography, makeStyles } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  heroImage: {\n    background: \"grey\",\n    height: \"600px\",\n    width: \"600px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"#ffe5b4\",\n    margin: \"0 auto\"\n  },\n  image: {\n    height: \"250px\",\n    width: \"250px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"#ffe5b4\"\n  },\n  mainGrid: {\n    maxWidth: \"775px\",\n    margin: \"50px 0\"\n  },\n  tileTitle: {\n    margin: \"15px auto 0\",\n    fontWeight: \"bold\"\n  },\n  tileSubTitle: {\n    margin: \"15px auto\"\n  },\n  tileActionText: {\n    borderBottom: \"1px solid\",\n    width: \"fit-content\"\n  },\n  heroTitle: {\n    fontWeight: \"bold\"\n  },\n  heroDescription: {\n    margin: \"15px 0\"\n  },\n  homeLink: {\n    color: \"black\",\n    textDecoration: \"none\"\n  },\n  actionLink: {\n    color: \"black\",\n    textDecoration: \"none\"\n  }\n}));\nexport default (props => {\n  const classes = useStyles();\n  const {\n    data\n  } = props;\n  const descrip = data.heroDescription ? data.heroDescription.split(\"<b>\") : [];\n\n  const renderSubCategories = () => {\n    return __jsx(Grid, {\n      container: true,\n      style: {\n        textAlign: \"center\"\n      }\n    }, subcategory.subcategories.map((x, y) => {\n      return __jsx(Grid, {\n        container: true,\n        item: true,\n        key: y,\n        xs: 12,\n        sm: 3,\n        alignItems: \"center\",\n        direction: \"column\"\n      }, __jsx(Grid, {\n        className: classes.image\n      }), __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        alignItems: \"center\",\n        justify: \"center\"\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        className: classes.tileTitle\n      }, x.title), __jsx(Typography, {\n        variant: \"subtitle1\",\n        className: classes.tileSubTitle,\n        style: {\n          width: \"270px\"\n        }\n      }, x.description), __jsx(Link, {\n        href: `/subcategory/${x.id}`\n      }, __jsx(Typography, {\n        variant: \"body1\",\n        className: classes.tileActionText\n      }, x.actionText))));\n    }));\n  };\n\n  return __jsx(Layout, null, __jsx(Grid, {\n    className: classes.mainGrid\n  }, __jsx(Typography, {\n    variant: \"h2\"\n  }, data.title), __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      margin: \"15px 0\"\n    }\n  }, data.subtitle), __jsx(Grid, {\n    container: true,\n    justify: \"flex-start\"\n  }, __jsx(Typography, {\n    className: classes.tileActionText,\n    style: {\n      marginRight: \"20px\"\n    }\n  }, data.actionText), __jsx(Link, {\n    href: \"/\"\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    className: classes.tileActionText\n  }, \"HOME\")))), data.subcategories && renderSubCategories(), __jsx(Grid, {\n    container: true,\n    style: {\n      margin: \"50px auto\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 7\n  }, __jsx(Grid, {\n    className: classes.heroImage\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 5,\n    container: true,\n    justify: \"center\",\n    alignItems: \"flex-start\",\n    direction: \"column\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.heroTitle\n  }, data.heroTitle), descrip && descrip.map((x, y) => __jsx(Typography, {\n    key: y,\n    variant: \"subtitle1\",\n    className: classes.heroDescription\n  }, x)), __jsx(Typography, {\n    variant: \"body1\",\n    className: classes.tileActionText\n  }, data.heroActionLink))));\n});\nexport async function getStaticPaths() {\n  let paths = getCategories();\n  paths = paths.map(x => {\n    return {\n      params: {\n        id: x.name.split(\" \").join(\"\")\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  return {\n    props: {\n      data: getCategories().filter(x => x.name.split(\" \").join(\"\") == params.id)[0]\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}